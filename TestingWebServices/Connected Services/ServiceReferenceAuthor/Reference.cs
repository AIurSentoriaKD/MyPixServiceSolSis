//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestingWebServices.ServiceReferenceAuthor {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceAuthor.wsAuthorSoap")]
    public interface wsAuthorSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListAuthors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ListAuthors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ListAuthors", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ListAuthorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Agregar(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agregar", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AgregarAsync(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarEncrypt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AgregarEncrypt(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AgregarEncrypt", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AgregarEncryptAsync(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HabilitarContenidoR34", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool HabilitarContenidoR34(string codigoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HabilitarContenidoR34", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> HabilitarContenidoR34Async(string codigoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SeguirArtista", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SeguirArtista(string codigoUsuario, string IDArtistaSeguir);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SeguirArtista", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SeguirArtistaAsync(string codigoUsuario, string IDArtistaSeguir);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EstaSiguiendo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EstaSiguiendo(string codigoUsuario, string IDArtista);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EstaSiguiendo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> EstaSiguiendoAsync(string codigoUsuario, string IDArtista);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Siguiendo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Siguiendo(string codigoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Siguiendo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> SiguiendoAsync(string codigoUsuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginIn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LoginIn(string mail, string passw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginIn", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoginInAsync(string mail, string passw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginInEncrypt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LoginInEncrypt(string mail, string passw, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LoginInEncrypt", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LoginInEncryptAsync(string mail, string passw, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ComisionesAbiertas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ComisionesAbiertas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ComisionesAbiertas", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ComisionesAbiertasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestsAbiertas", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable RequestsAbiertas();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RequestsAbiertas", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> RequestsAbiertasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserTrustLevel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int UserTrustLevel(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserTrustLevel", ReplyAction="*")]
        System.Threading.Tasks.Task<int> UserTrustLevelAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarPerfil", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ActualizarPerfil(string codUser, string opcion, string parametro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ActualizarPerfil", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ActualizarPerfilAsync(string codUser, string opcion, string parametro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AbrirRequests", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AbrirRequests(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AbrirRequests", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AbrirRequestsAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuthorFacturationAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AuthorFacturationAdd(string author_id, string fact_address, string fact_postal, string fact_country, float balance, string card_numb, string card_date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuthorFacturationAdd", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AuthorFacturationAddAsync(string author_id, string fact_address, string fact_postal, string fact_country, float balance, string card_numb, string card_date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FactInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable FactInfo(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FactInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> FactInfoAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FactStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool FactStatus(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FactStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> FactStatusAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationBalance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        float FacturationBalance(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationBalance", ReplyAction="*")]
        System.Threading.Tasks.Task<float> FacturationBalanceAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationCommisionOpens", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool FacturationCommisionOpens(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationCommisionOpens", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> FacturationCommisionOpensAsync(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationInfoUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool FacturationInfoUpdate(string codUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FacturationInfoUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> FacturationInfoUpdateAsync(string codUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsAuthorSoapChannel : TestingWebServices.ServiceReferenceAuthor.wsAuthorSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsAuthorSoapClient : System.ServiceModel.ClientBase<TestingWebServices.ServiceReferenceAuthor.wsAuthorSoap>, TestingWebServices.ServiceReferenceAuthor.wsAuthorSoap {
        
        public wsAuthorSoapClient() {
        }
        
        public wsAuthorSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public wsAuthorSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsAuthorSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public wsAuthorSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable ListAuthors() {
            return base.Channel.ListAuthors();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ListAuthorsAsync() {
            return base.Channel.ListAuthorsAsync();
        }
        
        public bool Agregar(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country) {
            return base.Channel.Agregar(authorid, nickname, accountname, email, pass, birthdate, country);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarAsync(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country) {
            return base.Channel.AgregarAsync(authorid, nickname, accountname, email, pass, birthdate, country);
        }
        
        public bool AgregarEncrypt(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country, string pattern) {
            return base.Channel.AgregarEncrypt(authorid, nickname, accountname, email, pass, birthdate, country, pattern);
        }
        
        public System.Threading.Tasks.Task<bool> AgregarEncryptAsync(int authorid, string nickname, string accountname, string email, string pass, string birthdate, string country, string pattern) {
            return base.Channel.AgregarEncryptAsync(authorid, nickname, accountname, email, pass, birthdate, country, pattern);
        }
        
        public bool HabilitarContenidoR34(string codigoUsuario) {
            return base.Channel.HabilitarContenidoR34(codigoUsuario);
        }
        
        public System.Threading.Tasks.Task<bool> HabilitarContenidoR34Async(string codigoUsuario) {
            return base.Channel.HabilitarContenidoR34Async(codigoUsuario);
        }
        
        public string SeguirArtista(string codigoUsuario, string IDArtistaSeguir) {
            return base.Channel.SeguirArtista(codigoUsuario, IDArtistaSeguir);
        }
        
        public System.Threading.Tasks.Task<string> SeguirArtistaAsync(string codigoUsuario, string IDArtistaSeguir) {
            return base.Channel.SeguirArtistaAsync(codigoUsuario, IDArtistaSeguir);
        }
        
        public bool EstaSiguiendo(string codigoUsuario, string IDArtista) {
            return base.Channel.EstaSiguiendo(codigoUsuario, IDArtista);
        }
        
        public System.Threading.Tasks.Task<bool> EstaSiguiendoAsync(string codigoUsuario, string IDArtista) {
            return base.Channel.EstaSiguiendoAsync(codigoUsuario, IDArtista);
        }
        
        public System.Data.DataTable Siguiendo(string codigoUsuario) {
            return base.Channel.Siguiendo(codigoUsuario);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SiguiendoAsync(string codigoUsuario) {
            return base.Channel.SiguiendoAsync(codigoUsuario);
        }
        
        public System.Data.DataTable LoginIn(string mail, string passw) {
            return base.Channel.LoginIn(mail, passw);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoginInAsync(string mail, string passw) {
            return base.Channel.LoginInAsync(mail, passw);
        }
        
        public System.Data.DataTable LoginInEncrypt(string mail, string passw, string pattern) {
            return base.Channel.LoginInEncrypt(mail, passw, pattern);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LoginInEncryptAsync(string mail, string passw, string pattern) {
            return base.Channel.LoginInEncryptAsync(mail, passw, pattern);
        }
        
        public System.Data.DataTable ComisionesAbiertas() {
            return base.Channel.ComisionesAbiertas();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ComisionesAbiertasAsync() {
            return base.Channel.ComisionesAbiertasAsync();
        }
        
        public System.Data.DataTable RequestsAbiertas() {
            return base.Channel.RequestsAbiertas();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> RequestsAbiertasAsync() {
            return base.Channel.RequestsAbiertasAsync();
        }
        
        public int UserTrustLevel(string codUser) {
            return base.Channel.UserTrustLevel(codUser);
        }
        
        public System.Threading.Tasks.Task<int> UserTrustLevelAsync(string codUser) {
            return base.Channel.UserTrustLevelAsync(codUser);
        }
        
        public string ActualizarPerfil(string codUser, string opcion, string parametro) {
            return base.Channel.ActualizarPerfil(codUser, opcion, parametro);
        }
        
        public System.Threading.Tasks.Task<string> ActualizarPerfilAsync(string codUser, string opcion, string parametro) {
            return base.Channel.ActualizarPerfilAsync(codUser, opcion, parametro);
        }
        
        public bool AbrirRequests(string codUser) {
            return base.Channel.AbrirRequests(codUser);
        }
        
        public System.Threading.Tasks.Task<bool> AbrirRequestsAsync(string codUser) {
            return base.Channel.AbrirRequestsAsync(codUser);
        }
        
        public bool AuthorFacturationAdd(string author_id, string fact_address, string fact_postal, string fact_country, float balance, string card_numb, string card_date) {
            return base.Channel.AuthorFacturationAdd(author_id, fact_address, fact_postal, fact_country, balance, card_numb, card_date);
        }
        
        public System.Threading.Tasks.Task<bool> AuthorFacturationAddAsync(string author_id, string fact_address, string fact_postal, string fact_country, float balance, string card_numb, string card_date) {
            return base.Channel.AuthorFacturationAddAsync(author_id, fact_address, fact_postal, fact_country, balance, card_numb, card_date);
        }
        
        public System.Data.DataTable FactInfo(string codUser) {
            return base.Channel.FactInfo(codUser);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FactInfoAsync(string codUser) {
            return base.Channel.FactInfoAsync(codUser);
        }
        
        public bool FactStatus(string codUser) {
            return base.Channel.FactStatus(codUser);
        }
        
        public System.Threading.Tasks.Task<bool> FactStatusAsync(string codUser) {
            return base.Channel.FactStatusAsync(codUser);
        }
        
        public float FacturationBalance(string codUser) {
            return base.Channel.FacturationBalance(codUser);
        }
        
        public System.Threading.Tasks.Task<float> FacturationBalanceAsync(string codUser) {
            return base.Channel.FacturationBalanceAsync(codUser);
        }
        
        public bool FacturationCommisionOpens(string codUser) {
            return base.Channel.FacturationCommisionOpens(codUser);
        }
        
        public System.Threading.Tasks.Task<bool> FacturationCommisionOpensAsync(string codUser) {
            return base.Channel.FacturationCommisionOpensAsync(codUser);
        }
        
        public bool FacturationInfoUpdate(string codUser) {
            return base.Channel.FacturationInfoUpdate(codUser);
        }
        
        public System.Threading.Tasks.Task<bool> FacturationInfoUpdateAsync(string codUser) {
            return base.Channel.FacturationInfoUpdateAsync(codUser);
        }
    }
}
